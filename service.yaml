Description: "Deploy basic analytics SNS, DynamoDB, Lambda microservice"
Resources:
  ##
  # SNS TOPICS
  ##
  RecvMessageSNS:
    Type: AWS::SNS::Topic
    Properties: 
      TopicName: recv_message
      Subscription:
        - Protocol: lambda
          Endpoint: !GetAtt ProcessMessageRecvFunction.Arn

  WeeklyDiagnosticSNS:
    Type: AWS::SNS::Topic
    Properties: 
      TopicName: weekly_diagnostic
      Subscription:
        - Protocol: lambda
          Endpoint: !GetAtt WeeklyDiagnosticFunction.Arn

  SuccessRateSNS:
    Type: AWS::SNS::Topic
    Properties: 
      TopicName: success_rate
         
  ##
  # LAMBDA FUNCTIONS
  ##
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaRole
      Description: Role for Lambda functions DynamoDB and SNS.
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess
      Path: /

  ProcessMessageRecvFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ProcessMessageRecv
      Description: Processes message_recv from SNS topic and save to DynamoDB.
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Code:
        ZipFile: |
          import boto3
          import json
          dynamodb = boto3.client('dynamodb')
          
          def handler(event, context): 
              print(f"Processing Event: {event}")
              for r in event["Records"]:
                  print(f"Processing Record: {r}")
                  msg = json.loads(r["Sns"]["Message"])
                  print(f"Message: {msg}")
                  entry = {
                      'moduleId': {
                          'S': msg["moduleid"]
                      },
                      'timestamp':{
                          'N': str(msg['timestamp'])
                      }
                  }
                  dynamodb.put_item(
                      TableName='message_recv',
                      Item=entry
                  )
                  print("Successfully saved entry.")
      Runtime: python3.7

  MessageRecvInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref ProcessMessageRecvFunction
      Principal: sns.amazonaws.com 

  WeeklyDiagnosticFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: WeeklyDiagnostic
      Description: Processes weekly_diagnostic from SNS topic and save to DynamoDB.
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Code:
        ZipFile: |
          import boto3
          import json
          dynamodb = boto3.client('dynamodb')
          
          def handler(event, context): 
              print(f"Processing Event: {event}")
              for r in event["Records"]:
                  print(f"Processing Record: {r}")
                  msg = json.loads(r["Sns"]["Message"])
                  print(f"Message: {msg}")
                  entry = {
                      'moduleId': {
                          'S': msg["moduleid"]
                      },
                      'timestamp':{
                          'N': str(msg['timestamp'])
                      },
                      'attempts':{
                          'N': str(msg['attempts'])
                      }
                  }
                  dynamodb.put_item(
                      TableName='weekly_diagnostic',
                      Item=entry
                  )
                  print("Successfully saved entry.")
      Runtime: python3.7

  WeeklyDiagnosticInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref WeeklyDiagnosticFunction
      Principal: sns.amazonaws.com 

  SuccessRateFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SuccessRate
      Description: Computes the success rate of modules from DynamoDB events.
      Handler: index.handler
      Environment:
        Variables:
          SUCCESS_SNS_ARN: !Ref SuccessRateSNS
      Role: !GetAtt LambdaRole.Arn
      Code:
        ZipFile: |
          import boto3
          from boto3.dynamodb.conditions import Key
          
          import json
          import os
          from datetime import datetime, timezone
          
          dynamodb = boto3.resource('dynamodb')
          
          def handler(event, context): 
              print(f"Event: {event}")
              for r in event["Records"]:
                  print(f"Records: {r}")
                  msg = r["dynamodb"]["NewImage"]
                  moduleId = msg["moduleId"]["S"]
                  attempts = float(msg["attempts"]["N"])
                  successful_messages = dynamodb.Table('message_recv').query(
                      KeyConditionExpression=Key('moduleId').eq(moduleId)
                  )
                  rate = successful_messages["Count"]/attempts
                  print(f"Success rate for module: {moduleId} is {rate*100}%")
                  message = {
                    "moduleId": moduleId,
                    "timestamp": int((datetime.now() - datetime(1970, 1, 1)).total_seconds()),
                    "success_rate": rate
                  }
                  print(f"Message to publish to {os.environ['SUCCESS_SNS_ARN']}: {message}")
                  sns_response = boto3.client('sns').publish(
                      TopicArn=os.environ["SUCCESS_SNS_ARN"],
                      Message=json.dumps(message)
                  )
                  print(f"Message sent: {sns_response['MessageId']}")
      Runtime: python3.7

  ##
  # DYNAMO DB
  ##
  DDBMessageTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: message_recv
      AttributeDefinitions:
        -
          AttributeName: "moduleId"
          AttributeType: "S"
        -
          AttributeName: "timestamp"
          AttributeType: "N"
      KeySchema:
        -
          AttributeName: "moduleId"
          KeyType: "HASH"
        -
          AttributeName: "timestamp"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  DDBDiagnosticTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: weekly_diagnostic
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      AttributeDefinitions:
        -
          AttributeName: "moduleId"
          AttributeType: "S"
        -
          AttributeName: "timestamp"
          AttributeType: "N"
      KeySchema:
        -
          AttributeName: "moduleId"
          KeyType: "HASH"
        -
          AttributeName: "timestamp"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  DynamoDBTableStream:
      Type: AWS::Lambda::EventSourceMapping
      Properties:
        # The maximum number of DB items to send to Lambda
        BatchSize: 1  # It can be changed based on the need
        Enabled: True
        EventSourceArn: !GetAtt DDBDiagnosticTable.StreamArn
        # TODO: add lambda into this file
        FunctionName: !GetAtt SuccessRateFunction.Arn
        # Always start at the tail of the Stream
        StartingPosition: LATEST




